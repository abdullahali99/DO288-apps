pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 60, unit: 'minutes')
    }
    agent {
      node {
        label 'nodejs'
      }
    }

    environment {
        dev_project = "abdullah-alali-99-gmail-com-books-dev"
        stage_project = "abdullah-alali-99-gmail-com-books-stage"
        app_git_url = "https://github.com/abdullahali99/do288-apps"
        nexus_server = "http://nexus-common.apps.ocp-eu1.prod.nextcle.com/repository/nodejs"

        // do not change the global vars below this line
        app_name = "books"
    }


    stages {

        stage('npm install') {
            steps {
                echo '### installing npm dependencies ###'
                sh '''
                        npm config set registry ${nexus_server}
                        cd books
                        npm install
                   '''
            }
        }

        stage('run unit tests') {
            steps {
                echo '### running unit tests ###'
                sh 'cd books; npm test'
            }
        }

        stage('run linting tools') {
            steps {
                echo '### running eslint on code ###'
                sh 'cd books; npm run lint'
            }
        }

        stage('launch new app in dev env') {
            steps {
                echo '### cleaning existing resources in dev env ###'
                sh '''
                        oc project ${dev_project}
                        oc delete all -l app=${app_name}
                        sleep 5
                   '''

                echo '### creating a new app in dev env ###'
                sh '''
                        oc project ${dev_project}
                        oc new-app --name books nodejs:8~${app_git_url} --build-env npm_config_registry=${nexus_server} --context-dir ${app_name}
                        oc expose svc/${app_name}
                   '''
            }
        }

        stage('wait for s2i build to complete') {
            steps {
                script {
                    openshift.withcluster() {
                        openshift.withproject( "${dev_project}" ) {
                            def bc = openshift.selector("bc", "${app_name}")
                            bc.logs('-f')
                            def builds = bc.related('builds')
                            builds.untileach(1) {
                                return (it.object().status.phase == "complete")
                            }
                        }
                    }
                }
            }
        }

        stage('wait for deployment in dev env') {
            steps {
                script {
                    openshift.withcluster() {
                        openshift.withproject( "${dev_project}" ) {
                            def deployment = openshift.selector("dc", "${app_name}").rollout()
                            openshift.selector("dc", "${app_name}").related('pods').untileach(1) {
                                return (it.object().status.phase == "running")
                            }
                        }
                    }
                }
            }
        }

        stage('promote to staging env') {
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    input message: "promote to staging?"
                }
                script {
                    openshift.withcluster() {
                    openshift.tag("${dev_project}/books:latest", "${stage_project}/books:stage")
                    }
                }
            }
        }

        stage('deploy to staging env') {
            steps {
                echo '### cleaning existing resources in staging ###'
                sh '''
                        oc project ${stage_project}
                        oc delete all -l app=${app_name}
                        sleep 5
                   '''

                echo '### creating a new app in staging ###'
                sh '''
                        oc project ${stage_project}
                        oc new-app --name books -i books:stage
                        oc expose svc/${app_name}
                   '''
            }
        }

        stage('wait for deployment in staging') {
            steps {
                sh "oc get route ${app_name} -n ${stage_project} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"

                script {
                    routehost = readfile('routehost').trim()

                    openshift.withcluster() {
                        openshift.withproject( "${stage_project}" ) {
                            def deployment = openshift.selector("dc", "${app_name}").rollout()
                            openshift.selector("dc", "${app_name}").related('pods').untileach(1) {
                                return (it.object().status.phase == "running")
                            }
                        }
                        echo "deployment to staging env is complete. access the app at the url http://${routehost}."
                    }
                }
            }
        }
    }
}
